#onFocus
  When the tab containing this text editor is hidden and the user does a
  find-in-page in a _different_ tab, Chrome on Mac likes to forget what the
  selection was right after sending this focus event and (if you let it)
  moves the cursor back to the beginning of the editor, so we force the
  selection here instead of simply accepting it in order to preserve the
  old cursor position. See https://crbug.com/540004.
  But it looks like this is fixed in Chrome 60.0.3081.0.
  Other browsers also don't have this bug, so we prefer to acceptSelection
  when possible, to ensure that unfocusing and refocusing a Draft editor
  doesn't preserve the selection, matching how textareas work.
  
#onKeyDown
  Intercept keydown behavior to handle keys and commands manually, if desired.
  Keydown combinations may be mapped to `DraftCommand` values, which may
  correspond to command functions that modify the editor or its contents.
 
  See `getDefaultKeyBinding` for defaults. Alternatively, the top-level
  component may provide a custom mapping via the `keyBindingFn` prop.

#onBeforeInput
  When `onBeforeInput` executes, the browser is attempting to insert a
  character into the editor. Apply this character data to the document,
  allowing native insertion if possible.
 
  Native insertion is encouraged in order to limit re-rendering and to
  preserve spellcheck highlighting, which disappears or flashes if re-render
  occurs on the relevant text nodes.

#onInput
  This function serves two purposes
 
  1. To update the editorState and call onChange method with the new
  editorState. This editorState is calculated in editOnBeforeInput but the
  onChange method is not called with the new state until this method does it.
  It is done to handle a specific case where certain character inputs might
  be replaced with something else. E.g. snippets ('rc' might be replaced
  with boilerplate code for react component). More information on the
  exact problem can be found here -
  https://github.com/facebook/draft-js/commit/07892ba479bd4dfc6afd1e0ed179aaf51cd138b1
 
  2. intended to handle spellcheck and autocorrect changes,
  which occur in the DOM natively without any opportunity to observe or
  interpret the changes before they occur.
 
  The `input` event fires in contentEditable elements reliably for non-IE
  browsers, immediately after changes occur to the editor DOM.  Since our other
  handlers override or otherwise handle cover other varieties of text input,
  the DOM state should match the model in all controlled input cases. Thus,
  when an `input` change leads to a DOM/model mismatch, the change should be
  due to a spellcheck change and we can incorporate it into our model.

##domText === modelText
  This can be buggy for some Android keyboards because they don't fire
  standard onkeydown/pressed events and only fired editOnInput
  so domText is already changed by the browser and ends up being equal
  to modelText unexpectedly. Newest versions of Android support the
  dom-inputevent-inputtype and we can use the `inputType` to properly apply
  the state changes.

  $FlowFixMe[prop-missing] inputType is only defined on a draft of a
  standard. https://w3c.github.io/input-events/#dom-inputevent-inputtype

#_pendingEditorState
  We have newEditorState, but we just don't want to call "editor.update"
  just yet. So let's store this state updated with our change to be consumed
  later, after the native event occurs and the browser inserts the char.
  After that, when we rerender, the text we see in the DOM will already have
  been inserted properly.

  This will happen for most simple insertions. The new state is already
  computed. Let's just call "editor.update". Things should match nicely so
  this function will exit below where we check "domText === modelText".

#lastChangeType
  lastChangeType: EditorChangeType;
  getLastChangeType();

  The type of content change that took place in order to bring us to our current ContentState. This is us  ed when determining boundary states for undo/redo.

#nativelyRenderedContent
  nativelyRenderedContent: ?ContentState;
  getNativelyRenderedContent()

  During edit behavior, the editor may allow certain actions to render natively. For instance, during nor  mal typing behavior in the contentEditable-based component, we can typically allow key events to fall t  hrough to print characters in the DOM. In doing so, we can avoid extra re-renders and preserve spellche  ck highlighting.

  When allowing native rendering behavior, it is appropriate to use the nativelyRenderedContent property   to indicate that no re-render is necessary for this EditorState.

#selectionBefore
  getSelectionBefore(): SelectionState
  Returns the SelectionState displayed in the editor before rendering blockMap.

  When performing an undo action in the editor, the selectionBefore of the current ContentState is used t  o place the selection range in the appropriate position.

#selectionAfter
  getSelectionAfter(): SelectionState
  Returns the SelectionState displayed in the editor after rendering blockMap.

  When performing any action in the editor that leads to this blockMap being rendered, the selection rang  e will be placed in the selectionAfter position.

#modifiers
  These functions encapsulate some of the most common transaction sequences.
  `DraftModifier` provides a set of convenience methods that apply
  modifications to a `ContentState` object based on a target `SelectionState`.
 
  Any change to a `ContentState` should be decomposable into a series of
  transaction functions that apply the required changes and return output
  `ContentState` objects.

#richUtils
  The RichUtils module is a static set of utility functions for rich text editing.

  In each case, these methods accept EditorState objects with relevant parameters and return EditorState   objects.

